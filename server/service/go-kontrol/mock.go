// Code generated by MockGen. DO NOT EDIT.
// Source: contract.go

// Package mock_gokontrol is a generated GoMock package.
package gokontrol

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockKontrol is a mock of Kontrol interface.
type MockKontrol struct {
	ctrl     *gomock.Controller
	recorder *MockKontrolMockRecorder
}

// MockKontrolMockRecorder is the mock recorder for MockKontrol.
type MockKontrolMockRecorder struct {
	mock *MockKontrol
}

// NewMockKontrol creates a new mock instance.
func NewMockKontrol(ctrl *gomock.Controller) *MockKontrol {
	mock := &MockKontrol{ctrl: ctrl}
	mock.recorder = &MockKontrolMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKontrol) EXPECT() *MockKontrolMockRecorder {
	return m.recorder
}

// AddSimpleObjectWithDefaultPolicy mocks base method.
func (m *MockKontrol) AddSimpleObjectWithDefaultPolicy(ctx context.Context, externalid, serviceid, servicekey string) (*ObjectPermission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSimpleObjectWithDefaultPolicy", ctx, externalid, serviceid, servicekey)
	ret0, _ := ret[0].(*ObjectPermission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddSimpleObjectWithDefaultPolicy indicates an expected call of AddSimpleObjectWithDefaultPolicy.
func (mr *MockKontrolMockRecorder) AddSimpleObjectWithDefaultPolicy(ctx, externalid, serviceid, servicekey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSimpleObjectWithDefaultPolicy", reflect.TypeOf((*MockKontrol)(nil).AddSimpleObjectWithDefaultPolicy), ctx, externalid, serviceid, servicekey)
}

// CreateCert mocks base method.
func (m *MockKontrol) CreateCert(obj *Object, policy, enforce []*Policy, objectExtendServiceIds []string) (*CertForSign, string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCert", obj, policy, enforce, objectExtendServiceIds)
	ret0, _ := ret[0].(*CertForSign)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(string)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// CreateCert indicates an expected call of CreateCert.
func (mr *MockKontrolMockRecorder) CreateCert(obj, policy, enforce, objectExtendServiceIds interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCert", reflect.TypeOf((*MockKontrol)(nil).CreateCert), obj, policy, enforce, objectExtendServiceIds)
}

// CreatePolicy mocks base method.
func (m *MockKontrol) CreatePolicy(ctx context.Context, servicekey string, policy *Policy) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePolicy", ctx, servicekey, policy)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePolicy indicates an expected call of CreatePolicy.
func (mr *MockKontrolMockRecorder) CreatePolicy(ctx, servicekey, policy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePolicy", reflect.TypeOf((*MockKontrol)(nil).CreatePolicy), ctx, servicekey, policy)
}

// GetObjectExtendServiceIds mocks base method.
func (m *MockKontrol) GetObjectExtendServiceIds(ctx context.Context, objId string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetObjectExtendServiceIds", ctx, objId)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetObjectExtendServiceIds indicates an expected call of GetObjectExtendServiceIds.
func (mr *MockKontrolMockRecorder) GetObjectExtendServiceIds(ctx, objId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetObjectExtendServiceIds", reflect.TypeOf((*MockKontrol)(nil).GetObjectExtendServiceIds), ctx, objId)
}

// IssueCertForClient mocks base method.
func (m *MockKontrol) IssueCertForClient(ctx context.Context, externalID, serID string) (*ObjectPermission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IssueCertForClient", ctx, externalID, serID)
	ret0, _ := ret[0].(*ObjectPermission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IssueCertForClient indicates an expected call of IssueCertForClient.
func (mr *MockKontrolMockRecorder) IssueCertForClient(ctx, externalID, serID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IssueCertForClient", reflect.TypeOf((*MockKontrol)(nil).IssueCertForClient), ctx, externalID, serID)
}

// IssueCertForService mocks base method.
func (m *MockKontrol) IssueCertForService(ctx context.Context, objID, externalid string) (*ObjectPermission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IssueCertForService", ctx, objID, externalid)
	ret0, _ := ret[0].(*ObjectPermission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IssueCertForService indicates an expected call of IssueCertForService.
func (mr *MockKontrolMockRecorder) IssueCertForService(ctx, objID, externalid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IssueCertForService", reflect.TypeOf((*MockKontrol)(nil).IssueCertForService), ctx, objID, externalid)
}

// UpdateObject mocks base method.
func (m *MockKontrol) UpdateObject(ctx context.Context, obj *Object, servicekey string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateObject", ctx, obj, servicekey)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateObject indicates an expected call of UpdateObject.
func (mr *MockKontrolMockRecorder) UpdateObject(ctx, obj, servicekey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateObject", reflect.TypeOf((*MockKontrol)(nil).UpdateObject), ctx, obj, servicekey)
}

// UpdatePolicy mocks base method.
func (m *MockKontrol) UpdatePolicy(ctx context.Context, servicekey string, policy *Policy) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePolicy", ctx, servicekey, policy)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePolicy indicates an expected call of UpdatePolicy.
func (mr *MockKontrolMockRecorder) UpdatePolicy(ctx, servicekey, policy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePolicy", reflect.TypeOf((*MockKontrol)(nil).UpdatePolicy), ctx, servicekey, policy)
}

// ValidateToken mocks base method.
func (m *MockKontrol) ValidateToken(c context.Context, token, reqPath, reqMethod string) (*Object, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateToken", c, token, reqPath, reqMethod)
	ret0, _ := ret[0].(*Object)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateToken indicates an expected call of ValidateToken.
func (mr *MockKontrolMockRecorder) ValidateToken(c, token, reqPath, reqMethod interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateToken", reflect.TypeOf((*MockKontrol)(nil).ValidateToken), c, token, reqPath, reqMethod)
}

// MockKontrolStore is a mock of KontrolStore interface.
type MockKontrolStore struct {
	ctrl     *gomock.Controller
	recorder *MockKontrolStoreMockRecorder
}

// MockKontrolStoreMockRecorder is the mock recorder for MockKontrolStore.
type MockKontrolStoreMockRecorder struct {
	mock *MockKontrolStore
}

// NewMockKontrolStore creates a new mock instance.
func NewMockKontrolStore(ctrl *gomock.Controller) *MockKontrolStore {
	mock := &MockKontrolStore{ctrl: ctrl}
	mock.recorder = &MockKontrolStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKontrolStore) EXPECT() *MockKontrolStoreMockRecorder {
	return m.recorder
}

// CreateObject mocks base method.
func (m *MockKontrolStore) CreateObject(c context.Context, obj *Object) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateObject", c, obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateObject indicates an expected call of CreateObject.
func (mr *MockKontrolStoreMockRecorder) CreateObject(c, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateObject", reflect.TypeOf((*MockKontrolStore)(nil).CreateObject), c, obj)
}

// CreatePolicy mocks base method.
func (m *MockKontrolStore) CreatePolicy(c context.Context, policy *Policy) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePolicy", c, policy)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePolicy indicates an expected call of CreatePolicy.
func (mr *MockKontrolStoreMockRecorder) CreatePolicy(c, policy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePolicy", reflect.TypeOf((*MockKontrolStore)(nil).CreatePolicy), c, policy)
}

// ExpiredObjectsByPolicy mocks base method.
func (m *MockKontrolStore) ExpiredObjectsByPolicy(c context.Context, policyId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExpiredObjectsByPolicy", c, policyId)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExpiredObjectsByPolicy indicates an expected call of ExpiredObjectsByPolicy.
func (mr *MockKontrolStoreMockRecorder) ExpiredObjectsByPolicy(c, policyId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExpiredObjectsByPolicy", reflect.TypeOf((*MockKontrolStore)(nil).ExpiredObjectsByPolicy), c, policyId)
}

// GetObjectByExternalID mocks base method.
func (m *MockKontrolStore) GetObjectByExternalID(c context.Context, extid, serviceid string) (*Object, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetObjectByExternalID", c, extid, serviceid)
	ret0, _ := ret[0].(*Object)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetObjectByExternalID indicates an expected call of GetObjectByExternalID.
func (mr *MockKontrolStoreMockRecorder) GetObjectByExternalID(c, extid, serviceid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetObjectByExternalID", reflect.TypeOf((*MockKontrolStore)(nil).GetObjectByExternalID), c, extid, serviceid)
}

// GetObjectByID mocks base method.
func (m *MockKontrolStore) GetObjectByID(c context.Context, id string) (*Object, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetObjectByID", c, id)
	ret0, _ := ret[0].(*Object)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetObjectByID indicates an expected call of GetObjectByID.
func (mr *MockKontrolStoreMockRecorder) GetObjectByID(c, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetObjectByID", reflect.TypeOf((*MockKontrolStore)(nil).GetObjectByID), c, id)
}

// GetObjectByToken mocks base method.
func (m *MockKontrolStore) GetObjectByToken(c context.Context, token string, timestamp int64) (*Object, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetObjectByToken", c, token, timestamp)
	ret0, _ := ret[0].(*Object)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetObjectByToken indicates an expected call of GetObjectByToken.
func (mr *MockKontrolStoreMockRecorder) GetObjectByToken(c, token, timestamp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetObjectByToken", reflect.TypeOf((*MockKontrolStore)(nil).GetObjectByToken), c, token, timestamp)
}

// GetObjectServiceMesh mocks base method.
func (m *MockKontrolStore) GetObjectServiceMesh(c context.Context, objectId string) ([]*ObjectServiceMess, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetObjectServiceMesh", c, objectId)
	ret0, _ := ret[0].([]*ObjectServiceMess)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetObjectServiceMesh indicates an expected call of GetObjectServiceMesh.
func (mr *MockKontrolStoreMockRecorder) GetObjectServiceMesh(c, objectId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetObjectServiceMesh", reflect.TypeOf((*MockKontrolStore)(nil).GetObjectServiceMesh), c, objectId)
}

// GetPolicyByID mocks base method.
func (m *MockKontrolStore) GetPolicyByID(c context.Context, id string) (*Policy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPolicyByID", c, id)
	ret0, _ := ret[0].(*Policy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPolicyByID indicates an expected call of GetPolicyByID.
func (mr *MockKontrolStoreMockRecorder) GetPolicyByID(c, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPolicyByID", reflect.TypeOf((*MockKontrolStore)(nil).GetPolicyByID), c, id)
}

// GetServiceByExternalId mocks base method.
func (m *MockKontrolStore) GetServiceByExternalId(c context.Context, externalId string) (*Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceByExternalId", c, externalId)
	ret0, _ := ret[0].(*Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceByExternalId indicates an expected call of GetServiceByExternalId.
func (mr *MockKontrolStoreMockRecorder) GetServiceByExternalId(c, externalId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceByExternalId", reflect.TypeOf((*MockKontrolStore)(nil).GetServiceByExternalId), c, externalId)
}

// GetServiceByID mocks base method.
func (m *MockKontrolStore) GetServiceByID(c context.Context, id string) (*Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceByID", c, id)
	ret0, _ := ret[0].(*Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceByID indicates an expected call of GetServiceByID.
func (mr *MockKontrolStoreMockRecorder) GetServiceByID(c, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceByID", reflect.TypeOf((*MockKontrolStore)(nil).GetServiceByID), c, id)
}

// UpdateObject mocks base method.
func (m *MockKontrolStore) UpdateObject(c context.Context, obj *Object) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateObject", c, obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateObject indicates an expected call of UpdateObject.
func (mr *MockKontrolStoreMockRecorder) UpdateObject(c, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateObject", reflect.TypeOf((*MockKontrolStore)(nil).UpdateObject), c, obj)
}

// UpdatePolicy mocks base method.
func (m *MockKontrolStore) UpdatePolicy(c context.Context, policy *Policy) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePolicy", c, policy)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePolicy indicates an expected call of UpdatePolicy.
func (mr *MockKontrolStoreMockRecorder) UpdatePolicy(c, policy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePolicy", reflect.TypeOf((*MockKontrolStore)(nil).UpdatePolicy), c, policy)
}
